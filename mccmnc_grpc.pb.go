// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf_mcc_mnc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoaderClient is the client API for Loader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoaderClient interface {
	ImsiLoad(ctx context.Context, opts ...grpc.CallOption) (Loader_ImsiLoadClient, error)
}

type loaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLoaderClient(cc grpc.ClientConnInterface) LoaderClient {
	return &loaderClient{cc}
}

func (c *loaderClient) ImsiLoad(ctx context.Context, opts ...grpc.CallOption) (Loader_ImsiLoadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Loader_ServiceDesc.Streams[0], "/mcc_mnc.Loader/ImsiLoad", opts...)
	if err != nil {
		return nil, err
	}
	x := &loaderImsiLoadClient{stream}
	return x, nil
}

type Loader_ImsiLoadClient interface {
	Send(*ImsiData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type loaderImsiLoadClient struct {
	grpc.ClientStream
}

func (x *loaderImsiLoadClient) Send(m *ImsiData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loaderImsiLoadClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoaderServer is the server API for Loader service.
// All implementations must embed UnimplementedLoaderServer
// for forward compatibility
type LoaderServer interface {
	ImsiLoad(Loader_ImsiLoadServer) error
	mustEmbedUnimplementedLoaderServer()
}

// UnimplementedLoaderServer must be embedded to have forward compatible implementations.
type UnimplementedLoaderServer struct {
}

func (UnimplementedLoaderServer) ImsiLoad(Loader_ImsiLoadServer) error {
	return status.Errorf(codes.Unimplemented, "method ImsiLoad not implemented")
}
func (UnimplementedLoaderServer) mustEmbedUnimplementedLoaderServer() {}

// UnsafeLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoaderServer will
// result in compilation errors.
type UnsafeLoaderServer interface {
	mustEmbedUnimplementedLoaderServer()
}

func RegisterLoaderServer(s grpc.ServiceRegistrar, srv LoaderServer) {
	s.RegisterService(&Loader_ServiceDesc, srv)
}

func _Loader_ImsiLoad_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoaderServer).ImsiLoad(&loaderImsiLoadServer{stream})
}

type Loader_ImsiLoadServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ImsiData, error)
	grpc.ServerStream
}

type loaderImsiLoadServer struct {
	grpc.ServerStream
}

func (x *loaderImsiLoadServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loaderImsiLoadServer) Recv() (*ImsiData, error) {
	m := new(ImsiData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Loader_ServiceDesc is the grpc.ServiceDesc for Loader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcc_mnc.Loader",
	HandlerType: (*LoaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImsiLoad",
			Handler:       _Loader_ImsiLoad_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mccmnc.proto",
}
